test inheritance.SpaceObject

instance
	SpaceObject spaceObject = new SpaceObject(),
	SpaceObject asteroid1 = new Asteroid(10, 2),
	SpaceObject asteroid2 = new Asteroid(10, 3),
	SpaceObject spaceShip = new SpaceShip()

sequence mass {
	-->
	state
		spaceObject { mass === 0.0 }
		asteroid1 	{ mass == asteroid2.mass * 8 / 27 }
		spaceShip 	{ mass === 1.0 }
}

state method testSpeed(double vx, double vy) {
	speed.x == vx
	speed.y == vy
}

state method testPosition(double x, double y) {
	position.x == x
	position.y == y
}

sequence accelerate {
	-- spaceObject.accelerate(2.3, 7.4) -->
	state spaceObject { testSpeed(2.3, 7.4) }
	
	-- asteroid1.accelerate(3.2, 4.7) -->
	state asteroid1 { testSpeed(3.2, 4.7) }
	
	-- spaceShip.accelerate(3.3, 7.7) -->
	state spaceShip { testSpeed(3.3, 7.7) }
}

sequence tick {
	-- spaceObject.accelerate(2.3, 7.4), spaceObject.tick -->
	state spaceObject { testPosition(2.3, 7.4) }
	-- spaceObject.accelerate(-2.3, -7.4), spaceObject.tick -->
	state spaceObject { testPosition(2.3, 7.4) }
	-- spaceObject.accelerate(-2.3, -7.4), spaceObject.tick -->
	state spaceObject { testPosition(0.0, 0.0) }
	
	-- asteroid1.accelerate(3.2, 4.7), asteroid1.tick -->
	state asteroid1 { testPosition(3.2, 4.7) }
	-- asteroid1.accelerate(-3.2, -4.7), asteroid1.tick -->
	state asteroid1 { testPosition(3.2, 4.7) }
	-- asteroid1.accelerate(-3.2, -4.7), asteroid1.tick -->
	state spaceObject { testPosition(0.0, 0.0) }
	
	-- spaceShip.accelerate(3.3, 7.7), spaceShip.tick -->
	state spaceShip { testPosition(3.3, 7.7) }
	-- spaceShip.accelerate(-3.3, -7.7), spaceShip.tick -->
	state spaceShip { testPosition(3.3, 7.7) }
	-- spaceShip.accelerate(-3.3, -7.7), spaceShip.tick -->
	state spaceShip { testPosition(0.0, 0.0) }
}

sequence applyForce {
	-- spaceObject.applyForce(2.3, 7.4) throws IllegalStateException

	-- asteroid1.applyForce(3.2, 4.7) -->
	state asteroid1 { testSpeed(3.2 / mass, 4.7 / mass) }
	
	-- spaceShip.applyForce(3.3, 7.7) -->
	state spaceShip { testSpeed(3.3 / mass, 7.7 / mass) }
}

instance
	SpaceObject so1 = createSpaceObject(0.0d, 0.0d, 7.0, 0.0d,	7.0, 7.0d, 0.0, 7.0d),
	SpaceObject so2 = createSpaceObject(2.0d, 2.0d, 8.0, 2.0d, 8.0, 8.0d, 2.0, 8.0d),
	SpaceObject so3 = createSpaceObject(5.0d, 1.0d, 9.0, 5.0d, 5.0, 9.0d, 1.0, 5.0d),
	SpaceObject so4 = createSpaceObject(9.0d, 6.0d, 13.0, 10.0d, 9.0, 14.0d, 5.0, 10.0d)

sequence intersects1 {
	--> 
	state
		so1 { 	intersects(so1) }
		so1 { 	intersects(so2) }
		so1 { 	intersects(so3) }		
		so1 { ! intersects(so4) }
}

sequence intersects2 {
	--> 
	state
		so2 { intersects(so2) }
		so2 { intersects(so1) }
		so2 { intersects(so3) }
		so2 { intersects(so4) }
}

sequence intersects3 {
	--> 
	state
		so3 { 	intersects(so3) }
		so3 { 	intersects(so1) }
		so3 { 	intersects(so2) }
		so3 { ! intersects(so4) }
}

sequence intersects4 {
	--> 
	state
		so4 { 	intersects(so4) }
		so4 { ! intersects(so1) }
		so4 { 	intersects(so2) }
		so4 { ! intersects(so3) }
}

// helper methods

method SpaceObject createSpaceObject(double... xys) {
	val so = new SpaceObject();
	so.points += xys;
	so;
}

method == (double d1, double d2) {
    val epsilon = 0.000001d
	d1 - epsilon < d2 && d1 + epsilon > d2
}
