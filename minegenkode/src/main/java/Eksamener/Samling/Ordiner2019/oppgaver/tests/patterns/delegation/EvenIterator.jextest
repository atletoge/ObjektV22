test patterns.delegation.EvenIterator

import java.util.Iterator
import java.util.Collection
import java.util.List

instance
	List<Integer> list18 = #[1, 2, 3, 4, 5, 6, 7, 8],
	List<Integer> list19 = #[1, 2, 3, 4, 5, 6, 7, 8, 9]

sequence caseEmpty {
	--> state { testIterator(#[]) }
}
sequence case1 {
	--> state { testIterator(#[1], 1) }
}
sequence case12 {
	--> state { testIterator(#[1, 2], 1) }
}
sequence case18 {
	--> state { testIterator(list18, 1, 3, 5, 7) }
}
sequence case19 {
	--> state { testIterator(list19, 1, 3, 5, 7, 9) }
}

method testIterator(Collection<Integer> col, int... values) {
	testIterator(new EvenIterator(col.iterator), values)
}

method testIterator(Iterator<Integer> iterator, int... values) {
	for (value : values) {
		assertTrue(iterator.hasNext)
		assertEquals(value, iterator.next)
	}
	assertFalse(iterator.hasNext)
}
